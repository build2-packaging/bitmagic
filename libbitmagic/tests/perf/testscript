: perf-run
$* >>~/EOO/
/BitCount. Random bitvector ;.+/
/BitCount: Sparse bitset  ;.+/
/BitCount: GAP Sparse bitset ;.+/
/count_to: GAP Sparse bitset ;.+/
/BitList algorithm. Conventional (AND based check) ;.+/
/BitScan on bitcount algorithm ;.+/
/BitScan on bitcount (block) ;.+/
/BitScan on bitcount64 (block) ;.+/
/select64 linear ;.+/
/select64 bitscan ;.+/
/BitTest: bitset  ;.+/
/BitTest: Sparse bitset (GAP)  ;.+/
/BitCompare: Random bitvector ;.+/
/bvector<>::optimize()  ;.+/
/bvector<>::find_reverse() ;.+/
/bvector<>::find() ;.+/
/Bit-block left rotate 1 ;.+/
/Bit-block left rotate 1 unrolled ;.+/
/Bit-block shift-r(1) ;.+/
/Bit-block shift-r(1) unrolled ;.+/
/Bit-block shift-l(1) ;.+/
/Bit-block shift-l(1) unrolled ;.+/
/bvector<>::enumerator ;.+/
/bvector<>::get_next() ;.+/
/bm::visit_each_bit() ;.+/
/Sparse bvector (enumerator) ;.+/
/Sparse bvector (get_next()) ;.+/
/Sparse bvector (enumerator) ;.+/
/Sparse bvector (get_next()) ;.+/
/Enumerator at bit pos:   ;.+/
/Enumerator at gap pos:  ;.+/
/bvector<>::shift_right()  ;.+/
/bvector<>::shift_left()  ;.+/
/bvector<>::shift_right()+AND  ;.+/
/aggregator::shift_right_and()  ;.+/
/bvector<>::copy_range() ;.+/
/bvector<>:: copy range constructor ;.+/
/copy range with AND ;.+/
/bvector<>::count_range() (BITS) ;.+/
/bvector<>::is_all_one_range() (BITS) ;.+/
/bvector<>::is_interval() (BITS) ;.+/
/reference_is_interval() (BITS) ;.+/
/bvector<>::any_range() (BITS) ;.+/
/bvector<>::find_interval_start() (BITS) ;.+/
/bvector<>::find_interval_end() (BITS) ;.+/
/interval_enumerator<> (BITS) ;.+/
/bvector<>::enumerator (BITS) ;.+/
/bvector<>::count_range() (BITS+GAPS) ;.+/
/bvector<>::is_all_one_range() (BITS+GAPS) ;.+/
/bvector<>::is_interval() (BITS+GAPS) ;.+/
/reference_is_interval() (BITS+GAPS) ;.+/
/bvector<>::any_range() (BITS+GAPS) ;.+/
/bvector<>::find_interval_start() (BITS+GAPS) ;.+/
/bvector<>::find_interval_end() (BITS+GAPS) ;.+/
/interval_enumerator<> (BITS+GAPS) ;.+/
/bvector<>::enumerator (BITS+GAPS) ;.+/
/Horizontal aggregator OR  ;.+/
/aggregator OR ;.+/
/Horizontal aggregator AND ;.+/
/aggregator AND ;.+/
/Horizontal aggregator AND-SUB ;.+/
/aggregator AND-SUB ;.+/
/OR-optimize (2 operand) bvector test ;.+/
/OR-optimize (3 operand) bvector test ;.+/
/AND bvector test ;.+/
/XOR bvector test ;.+/
/AND-NOT bvector test ;.+/
/SUB-optimize (2 operand) bvector test ;.+/
/SUB-optimize (3 operand) bvector test ;.+/
/Invert bvector ;.+/
/XOR COUNT bvector test ;.+/
/XOR COUNT bvector test ;.+/
/XOR COUNT bvector(opt) test ;.+/
/AND COUNT bvector test ;.+/
/AND COUNT bvector test ;.+/
/AND COUNT bvector(opt) test ;.+/
/Tversky Index bvector test vector ;.+/
/Tversky Index bvector test (pipeline) ;.+/
/Dice metric bvector test ;.+/
/Tversky Index bvector test(pipeline) ;.+/
/Tversky index bvector test ;.+/
/Tversky Index bvector test (pipeline) ;.+/
/Small bvector serialization ;.+/
/Large bvector serialization ;.+/
/sparse_vector random element assignment test ;.+/
/sparse_vector back_inserter test ;.+/
/sparse_vector random element access test ;.+/
/sparse_vectot<>::gather()  ;.+/
/sparse_vector<>::decode() ;.+/
/sparse_vector const_iterator test ;.+/
/std::vector<> scan  ;.+/
/horizontal sparse vector scanner find_eq() ;.+/
/sparse vector scanner find_eq()  ;.+/
/bm::sparse_vector<> serialization XOR disabled  ;.+/
/bm::sparse_vector<> serialization XOR enabled  ;.+/
/bm::sparse_vector<> Range Deserialization() - NO bookmarks  ;.+/
/bm::sparse_vector<> Range Deserialization() - WITH bookmarks  ;.+/
/rsc_sparse_vector() set values ;.+/
/rsc_sparse_vector() set values (rs-index) ;.+/
/rsc_sparse_vector()::decode() test (sparse) ;.+/
/rsc_sparse_vector()::decode_buf() test (sparse) ;.+/
/rsc_sparse_vector<>::decode() test (dense) ;.+/
/rsc_sparse_vector()::decode_buf() test (dense) ;.+/
/Rank compression test ;.+/
/Rank compression (by source) test ;.+/
/Rank decompression test ;.+/
/set2set_11_transform::run() ;.+/
/bm::str_sparse_vector<>::push_back()  ;.+/
/bm::str_sparse_vector<>::back_insert_iterator  ;.+/
/bm::str_sparse_vector<> - random access  ;.+/
/bm::str_sparse_vector<>::const_iterator  ;.+/
EOO
